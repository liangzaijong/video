from diffusers import TextToVideoSDPipeline, DPMSolverMultistepScheduler
from utils import parse, vis
from prompt import negative_prompt
import torch
import numpy as np
import os
from PIL import Image, ImageEnhance, ImageDraw, ImageFont
import cv2

# 初始化模型
version = "modelscope"
model_key = "damo-vilab/text-to-video-ms-1.7b"

pipe = TextToVideoSDPipeline.from_pretrained(model_key, torch_dtype=torch.float16)
pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
pipe.to("cuda")
pipe.enable_vae_slicing()
pipe.guidance_models = None

# 初始化分辨率
H, W = None, None

def init(option):
    global H, W
    if option == "":
        H, W = 512, 512
    elif option == "256":
        H, W = 256, 256
    else:
        raise ValueError(f"Unknown option: {option}")
    return H, W

# 颜色校正
def adjust_color(frame, brightness=1.0, contrast=1.0, saturation=1.0):
    """
    调整视频帧的亮度、对比度和饱和度。
    :param frame: 输入的帧（numpy 数组，形状为 [H, W, C]）
    :param brightness: 亮度调整因子
    :param contrast: 对比度调整因子
    :param saturation: 饱和度调整因子
    :return: 调整后的帧
    """
    pil_image = Image.fromarray(frame)
    enhancer = ImageEnhance.Brightness(pil_image)
    pil_image = enhancer.enhance(brightness)
    enhancer = ImageEnhance.Contrast(pil_image)
    pil_image = enhancer.enhance(contrast)
    enhancer = ImageEnhance.Color(pil_image)
    pil_image = enhancer.enhance(saturation)
    return np.array(pil_image)

# 帧率调整
def adjust_frame_rate(frames, target_fps, original_fps):
    """
    调整视频帧率。
    :param frames: 输入的帧列表
    :param target_fps: 目标帧率
    :param original_fps: 原始帧率
    :return: 调整后的帧列表
    """
    if target_fps == original_fps:
        return frames
    frame_interval = original_fps / target_fps
    adjusted_frames = [frames[int(i)] for i in range(len(frames)) if i % frame_interval < 1]
    return adjusted_frames

# 添加水印
def add_watermark(frame, text="Sample Watermark", position=(10, 10), font_size=30, color=(255, 255, 255)):
    """
    在视频帧上添加水印。
    :param frame: 输入的帧（numpy 数组）
    :param text: 水印文本
    :param position: 水印位置 (x, y)
    :param font_size: 字体大小
    :param color: 水印颜色 (R, G, B)
    :return: 添加水印后的帧
    """
    pil_image = Image.fromarray(frame)
    draw = ImageDraw.Draw(pil_image)
    font = ImageFont.load_default()  # 使用默认字体，也可以加载自定义字体
    draw.text(position, text, font=font, fill=color)
    return np.array(pil_image)

# 视频生成和后处理
def run(
    parsed_layout,
    seed,
    *,
    num_inference_steps=40,
    num_frames=16,
    repeat_ind=None,
    save_formats=["gif", "joblib"],
    brightness=1.0,
    contrast=1.0,
    saturation=1.0,
    target_fps=24,
    original_fps=30,
    watermark_text="My Watermark",
):
    prompt = parsed_layout["Prompt"]

    if repeat_ind is not None:
        save_suffix = repeat_ind
    else:
        save_suffix = f"seed{seed}"

    save_path = f"{parse.img_dir}/video_{save_suffix}.gif"
    if os.path.exists(save_path):
        print(f"Skipping {save_path}")
        return

    print("Generating")
    generator = torch.Generator(device="cuda").manual_seed(seed)

    # 生成视频帧
    video_frames = pipe(
        prompt,
        negative_prompt=negative_prompt,
        num_inference_steps=num_inference_steps,
        height=H,
        width=W,
        num_frames=num_frames,
        cross_attention_kwargs=None,
        generator=generator,
    ).frames
    video_frames = (video_frames[0] * 255.0).astype(np.uint8)

    # 后处理
    processed_frames = []
    for frame in video_frames:
        # 颜色校正
        frame = adjust_color(frame, brightness=brightness, contrast=contrast, saturation=saturation)
        # 添加水印
        frame = add_watermark(frame, text=watermark_text, position=(10, 10))
        processed_frames.append(frame)

    # 调整帧率
    processed_frames = adjust_frame_rate(processed_frames, target_fps=target_fps, original_fps=original_fps)

    # 保存处理后的帧
    vis.save_frames(f"{parse.img_dir}/video_{save_suffix}", processed_frames, formats=save_formats)

# 示例调用
if __name__ == "__main__":
    # 初始化分辨率
    init("")

    # 示例布局和参数
    parsed_layout = {"Prompt": "A beautiful sunset over the mountains"}
    seed = 42

    # 生成视频并进行后处理
    run(
        parsed_layout,
        seed,
        brightness=1.2,
        contrast=1.1,
        saturation=1.1,
        target_fps=24,
        original_fps=30,
        watermark_text="Generated by AI",
    )